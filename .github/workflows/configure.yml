name: Build Network

on:
  push:
    branches:
      - '!main'
      - '*'

env:
  APP_DIR: ./network_builder

jobs:

  # Lint Python Code
  lint_code:
    runs-on: self-hosted
    container:
      image: anttof/network-builder:latest

    steps: 
     - name: Check out this repository  
       uses: actions/checkout@v2

     - name: Simple Bash test 
       shell: bash
       run: ls -ahl

     - name: Black Python Code Lint 
       run: black . --check

     - name: Isort Python Import Sort
       run: isort . --profile black --check

  # Test Python Code
  test_code:
    runs-on: self-hosted
    container:
      image: anttof/network-builder:latest

    steps: 
     - name: Check out this repository  
       uses: actions/checkout@v2

     - name: Test Jinja2 Filters
       working-directory: ${{ env.APP_DIR }}
       run: python -m unittest tests.test_filters -v

      #  python -m unittest discover -s tests -v
     - name: Test Network Builder
       working-directory: ${{ env.APP_DIR }}
       run: python -m unittest tests.test_network_builder -v

  # Build Network Configurations
  build_configs:
    runs-on: self-hosted
    needs: [lint_code, test_code]
    container:
      image: anttof/network-builder:latest

    steps: 
     - name: Check out this repository  
       uses: actions/checkout@v2

     - name: generate_configs 
       working-directory: ${{ env.APP_DIR }}
       run: ./network_builder.py --build_config

  # Test configurations using batfish to avoid any errors
  test_configs:
    runs-on: self-hosted
    needs: [build_configs]

    steps: 

     - name: install pybatfish 
       run: pip install pybatfish rich

     - name: Test Configuration via Batfish 
       run: batfish/test_configs.py --disable-pytest-warnings -s

  # Display changes that would be made to the network in a dry-run
  deploy_configs_dry:
    runs-on: self-hosted
    needs: [test_configs]
    container:
      image: anttof/network-builder:latest

    steps: 
     - name: Check out this repository  
       uses: actions/checkout@v2

     - name: deploy_configs
       working-directory: ${{ env.APP_DIR }}
       run: ./network_builder.py --deploy --dry_run
       env:
         SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
         SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}

    # Commit all new configs if all tests succeeded
     - name: Commit generated configs
       run: |
         git config user.name "network_robot"
         git config user.email "actions@users.noreply.github.com"
         git add -A
         timestamp=$(date -u)
         git commit -m "Updated Configs: ${timestamp}" || exit 0
         git push

